name: CI Workflow

on:
  push:
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, windows-2019, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest

    - uses: rlespinasse/github-slug-action@v3.x

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Workaround for https://github.com/conda-incubator/setup-miniconda/issues/186
        conda config --remove channels defaults
        # We pin yarp to 3.9.* until https://github.com/robotology/idyntree-yarp-tools/issues/50 is fixed
        conda install -c conda-forge -c robotology cmake compilers make ninja pkg-config qt-main yarp==3.9.* icub-main idyntree

    # Additional dependencies useful only on Linux
    - name: Dependencies [Conda/Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # Additional dependencies only useful on Linux
        # See https://github.com/robotology/robotology-superbuild/issues/477
        conda install libgl-devel

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Configure [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -G"Visual Studio 16 2019" -DBUILD_TESTING:BOOL=ON \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Build
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
